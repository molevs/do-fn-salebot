// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ContextValue is an autogenerated mock type for the ContextValue type
type ContextValue struct {
	mock.Mock
}

type ContextValue_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextValue) EXPECT() *ContextValue_Expecter {
	return &ContextValue_Expecter{mock: &_m.Mock}
}

// Value provides a mock function with given fields: key
func (_m *ContextValue) Value(key interface{}) interface{} {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ContextValue_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type ContextValue_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key interface{}
func (_e *ContextValue_Expecter) Value(key interface{}) *ContextValue_Value_Call {
	return &ContextValue_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *ContextValue_Value_Call) Run(run func(key interface{})) *ContextValue_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ContextValue_Value_Call) Return(_a0 interface{}) *ContextValue_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextValue_Value_Call) RunAndReturn(run func(interface{}) interface{}) *ContextValue_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewContextValue creates a new instance of ContextValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextValue {
	mock := &ContextValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
